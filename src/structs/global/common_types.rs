use serde::{Deserialize, Serialize};

// https://docs.invidious.io/api/common_types/#videoobject

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CommonImage {
    pub url: String,
    pub width: u32,
    pub height: u32,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CommonThumbnail {
    #[serde(default)]
    pub quality: String,
    pub url: String,
    pub width: u32,
    pub height: u32,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CommonVideo {
    pub title: String,
    #[serde(rename = "videoId")]
    pub id: String,

    pub author: String,
    #[serde(rename = "authorId")]
    pub author_id: String,
    #[serde(rename = "authorUrl")]
    pub author_url: String,
    // #[serde(rename = "authorVerified")]
    // #[serde(default)]
    // pub author_verified: bool,
    #[serde(rename = "videoThumbnails")]
    pub thumbnails: Vec<CommonThumbnail>,

    pub description: String,
    #[serde(rename = "descriptionHtml")]
    pub description_html: String,

    #[serde(rename = "viewCount")]
    pub views: u64,
    // #[serde(rename = "viewCountText")]
    // pub views_text: String,
    #[serde(rename = "lengthSeconds")]
    pub length: u32,

    pub published: u64,
    #[serde(rename = "publishedText")]
    pub published_text: String,

    #[serde(rename = "premiereTimestamp")]
    #[serde(default)]
    pub premiere_timestamp: u64,

    #[serde(rename = "liveNow")]
    pub live: bool,
    pub premium: bool,
    #[serde(rename = "isUpcoming")]
    pub upcoming: bool,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CommonChannel {
    #[serde(rename = "author")]
    pub name: String,
    #[serde(rename = "authorId")]
    pub id: String,
    #[serde(rename = "authorUrl")]
    pub url: String,
    #[serde(rename = "authorVerified")]
    #[serde(default)]
    pub verified: bool,
    #[serde(rename = "authorThumbnails")]
    pub thumbnails: Vec<CommonImage>,
    #[serde(rename = "autoGenerated")]
    #[serde(default)]
    pub auto_generated: bool,
    #[serde(rename = "subCount")]
    pub subscribers: u32,
    #[serde(rename = "videoCount")]
    pub video_count: u32,
    pub description: String,
    #[serde(rename = "descriptionHtml")]
    pub description_html: String,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CommonPlaylist {
    title: String,
    #[serde(rename = "playlistId")]
    id: String,
    #[serde(rename = "playlistThumbnail")]
    #[serde(default)]
    thumbnail: String,

    author: String,
    #[serde(rename = "authorId")]
    author_id: String,
    #[serde(rename = "authorUrl")]
    author_url: String,
    #[serde(rename = "authorVerified")]
    #[serde(default)]
    author_verified: bool,

    #[serde(rename = "videoCount")]
    video_count: u32,
    videos: Vec<CommonPlaylistVideo>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CommonPlaylistVideo {
    title: String,
    #[serde(rename = "videoId")]
    id: String,
    #[serde(rename = "lengthSeconds")]
    length: u32,
    #[serde(rename = "videoThumbnails")]
    thumbnails: Vec<CommonThumbnail>,
}
