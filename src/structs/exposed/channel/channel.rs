use crate::{
    structs::hidden::{AuthorBanner, AuthorThumbnail, ChannelVideo, RelatedChannel, CountryCode},
    traits::PublicItems,
};
use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Channel {
    #[serde(rename(serialize = "author", deserialize = "author"))]
    pub name: String,
    #[serde(rename(serialize = "authorId", deserialize = "authorId"))]
    pub id: String,
    #[serde(rename(serialize = "authorUrl", deserialize = "authorUrl"))]
    pub url: String,
    #[serde(rename(serialize = "authorBanners", deserialize = "authorBanners"))]
    pub banners: Vec<AuthorBanner>,
    #[serde(rename(serialize = "authorThumbnails", deserialize = "authorThumbnails"))]
    pub thumbnails: Vec<AuthorThumbnail>,

    #[serde(rename(serialize = "subCount", deserialize = "subCount"))]
    pub sub_count: u32,
    #[serde(rename(serialize = "totalViews", deserialize = "totalViews"))]
    pub total_views: u64,
    pub joined: u64,

    #[serde(rename(serialize = "autoGenerated", deserialize = "autoGenerated"))]
    pub auto_generated: bool,
    #[serde(rename(serialize = "isFamilyFriendly", deserialize = "isFamilyFriendly"))]
    pub family_friendly: bool,
    pub description: String,
    #[serde(rename(serialize = "descriptionHtml", deserialize = "descriptionHtml"))]
    pub description_html: String,
    #[serde(rename(serialize = "allowedRegions", deserialize = "allowedRegions"))]
    pub allowed_regions: Vec<CountryCode>,

    #[serde(rename(serialize = "latestVideos", deserialize = "latestVideos"))]
    pub lastest_videos: Vec<ChannelVideo>,

    #[serde(rename(serialize = "relatedChannels", deserialize = "relatedChannels"))]
    pub related_channels: Vec<RelatedChannel>,
}

impl PublicItems for Channel {
    fn url(server: &str, args: String) -> String {
        format!("{}/api/v1/channels/{}", server, args)
    }
}
